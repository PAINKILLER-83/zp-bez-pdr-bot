import os, time, aiosqlite
from fastapi import FastAPI, Request, HTTPException
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, ContextTypes, filters
)

# ========= ENV =========
BOT_TOKEN = os.environ["BOT_TOKEN"]
CHANNEL_ID = os.environ.get("CHANNEL_ID", "@zp_bez_pdr")  # @public –∞–±–æ -100... –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ
WEBHOOK_SECRET = os.environ.get("WEBHOOK_SECRET", "zapbezpdr2025")
ADMIN_CHAT_ID = os.environ.get("ADMIN_CHAT_ID")           # -100... –∞–±–æ id –≥—Ä—É–ø–∏ –∑ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
TRUST_QUOTA = int(os.environ.get("TRUST_QUOTA", "0"))     # —Å–∫—ñ–ª—å–∫–∏ –ø–µ—Ä—à–∏—Ö –ø–æ—Å—Ç—ñ–≤ –º–æ–¥–µ—Ä—É—î–º–æ

# ========= –ö–ê–¢–ï–ì–û–†–Ü–á (–∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–¥ -> –¥–æ–≤–≥–∞ –Ω–∞–∑–≤–∞) =========
CATEGORY_MAP = {
    "c1": "üöó –ü–µ—Ä–µ—Å—Ç—Ä–æ—é–≤–∞–Ω–Ω—è –±–µ–∑ –ø–æ–∫–∞–∂—á–∏–∫–∞ –ø–æ–≤–æ—Ä–æ—Ç—É",
    "c2": "‚ÜîÔ∏è –ü–µ—Ä–µ—Å—Ç—Ä–æ—é–≤–∞–Ω–Ω—è –±–µ–∑ –Ω–∞–¥–∞–Ω–Ω—è –ø–µ—Ä–µ–≤–∞–≥–∏",
    "c3": "‚õ≥ –ü–µ—Ä–µ—Ö—Ä–µ—Å—Ç—è: –ø–µ—Ä–µ—Ö—ñ–¥ —É —ñ–Ω—à—É —Å–º—É–≥—É",
    "c4": "üÖøÔ∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ –ø–∞—Ä–∫—É–≤–∞–Ω–Ω—è (—Ç—Ä–æ—Ç—É–∞—Ä/–∑–µ–±—Ä–∞)",
    "c5": "‚õî –†—É—Ö –ø–æ –∑—É—Å—Ç—Ä—ñ—á–Ω—ñ–π",
    "c6": "‚ùó –Ü–Ω—à–µ",
}
PDR_MAP = {
    "üöó –ü–µ—Ä–µ—Å—Ç—Ä–æ—é–≤–∞–Ω–Ω—è –±–µ–∑ –ø–æ–∫–∞–∂—á–∏–∫–∞ –ø–æ–≤–æ—Ä–æ—Ç—É": "–ü–î–†: –ø.9.2, –ø.9.4",
    "‚ÜîÔ∏è –ü–µ—Ä–µ—Å—Ç—Ä–æ—é–≤–∞–Ω–Ω—è –±–µ–∑ –Ω–∞–¥–∞–Ω–Ω—è –ø–µ—Ä–µ–≤–∞–≥–∏": "–ü–î–†: –ø.10.3",
    "‚õ≥ –ü–µ—Ä–µ—Ö—Ä–µ—Å—Ç—è: –ø–µ—Ä–µ—Ö—ñ–¥ —É —ñ–Ω—à—É —Å–º—É–≥—É": "–ü–î–†: –ø.10.4 (+–ø.10.1)",
    "üÖøÔ∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ –ø–∞—Ä–∫—É–≤–∞–Ω–Ω—è (—Ç—Ä–æ—Ç—É–∞—Ä/–∑–µ–±—Ä–∞)": "–ü–î–†: –ø.15.9‚Äì15.10",
    "‚õî –†—É—Ö –ø–æ –∑—É—Å—Ç—Ä—ñ—á–Ω—ñ–π": "–ü–î–†: —Ä–æ–∑–¥.11",
    "‚ùó –Ü–Ω—à–µ": "–ü–î–†: (—É—Ç–æ—á–Ω–∏—Ç–∏)",
}

# ========= RULES =========
RULES_TEXT = (
    "üìú –ü—Ä–∞–≤–∏–ª–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π:\n"
    "1) –ü—É–±–ª—ñ–∫—É—î–º–æ —Ñ–∞–∫—Ç–∏: —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ + –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å. –ë–µ–∑ –æ–±—Ä–∞–∑ —Ç–∞ –æ—Ü—ñ–Ω–æ–∫.\n"
    "2) –ù–µ –ø—É–±–ª—ñ–∫—É—î–º–æ –∑–∞–π–≤—ñ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ, —â–æ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–ª—è —Ñ—ñ–∫—Å–∞—Ü—ñ—ó –ø–æ—Ä—É—à–µ–Ω–Ω—è.\n"
    "3) –Ø–∫—â–æ –≤ –∫–∞–¥—Ä—ñ —á—ñ—Ç–∫–æ –≤–∏–¥–Ω–æ –æ–±–ª–∏—á—á—è —Å—Ç–æ—Ä–æ–Ω–Ω—ñ—Ö –ª—é–¥–µ–π/–¥—ñ—Ç–µ–π ‚Äî –ø–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –Ω–µ –∑–Ω—ñ–º–∞–π—Ç–µ –∫—Ä—É–ø–Ω–∏–º –ø–ª–∞–Ω–æ–º.\n"
    "4) –ü–æ—Å—Ç–∏ ‚Äî —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –º–æ–∂–ª–∏–≤–µ –ø–æ—Ä—É—à–µ–Ω–Ω—è. –û—Å—Ç–∞—Ç–æ—á–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è ‚Äî –∑–∞ –ø–æ–ª—ñ—Ü—ñ—î—é.\n\n"
    "–ó–≤ º—è–∑–æ–∫ —ñ–∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ‚Äî —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ¬´–ó–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞¬ª –≤ –±–æ—Ç—ñ."
)

# ========= FASTAPI + PTB =========
app = FastAPI()
tg_app: Application = Application.builder().token(BOT_TOKEN).build()

# ========= DB =========
async def init_db():
    async with aiosqlite.connect("bot.db") as db:
        # –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
        await db.execute("""CREATE TABLE IF NOT EXISTS users(
            user_id INTEGER PRIMARY KEY,
            trust INT DEFAULT 0,
            last_reset INT DEFAULT 0,
            hourly_count INT DEFAULT 0,
            seen_menu INT DEFAULT 0
        )""")
        # –≤—Ö—ñ–¥–Ω—ñ —Ä–µ–ø–æ—Ä—Ç–∏
        await db.execute("""CREATE TABLE IF NOT EXISTS inbox(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            caption TEXT,
            media_file_id TEXT,
            media_type TEXT,
            category TEXT,
            ts INT,
            location_lat REAL,
            location_lon REAL,
            location_text TEXT,
            user_note TEXT
        )""")
        # —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å –∑—ñ —Å—Ç–∞—Ä–æ—é —Å—Ö–µ–º–æ—é (idempotent)
        try: await db.execute("ALTER TABLE users ADD COLUMN seen_menu INT DEFAULT 0")
        except: pass
        try: await db.execute("ALTER TABLE inbox ADD COLUMN location_lat REAL")
        except: pass
        try: await db.execute("ALTER TABLE inbox ADD COLUMN location_lon REAL")
        except: pass
        try: await db.execute("ALTER TABLE inbox ADD COLUMN location_text TEXT")
        except: pass
        try: await db.execute("ALTER TABLE inbox ADD COLUMN user_note TEXT")
        except: pass
        await db.commit()

# ========= HELPERS =========
def category_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(name, callback_data=f"cat|{code}")]
        for code, name in CATEGORY_MAP.items()
    ])

def detail_menu_kb(has_loc: bool, has_note: bool, rec_id: int):
    t_loc  = f"üìç –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è{' ‚úÖ' if has_loc  else ''}"
    t_note = f"üìù –ö–æ–º–µ–Ω—Ç–∞—Ä{' ‚úÖ'    if has_note else ''}"
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(t_loc,  callback_data=f"det|loc|{rec_id}")],
        [InlineKeyboardButton(t_note, callback_data=f"det|note|{rec_id}")],
        [InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—ñ", callback_data=f"det|done|{rec_id}")]
    ])

async def ensure_user(uid: int):
    async with aiosqlite.connect("bot.db") as db:
        cur = await db.execute("SELECT user_id FROM users WHERE user_id=?", (uid,))
        if not await cur.fetchone():
            await db.execute(
                "INSERT INTO users(user_id, trust, last_reset, hourly_count, seen_menu) VALUES(?,?,?,?,?)",
                (uid, 0, int(time.time()), 0, 0)
            )
            await db.commit()

def resolve_chat_id(val: str):
    v = (val or "").strip()
    if v.startswith("-100"):
        try: return int(v)
        except: pass
    return v  # @username

async def publish_to_channel(context: ContextTypes.DEFAULT_TYPE, mtype: str, file_id: str, text: str):
    chat = resolve_chat_id(CHANNEL_ID)
    if mtype == "photo":
        await context.bot.send_photo(chat_id=chat, photo=file_id, caption=text)
    else:
        await context.bot.send_video(chat_id=chat, video=file_id, caption=text)

async def edit_q_message(q: "telegram.CallbackQuery", text: str, kb=None):
    try:
        if q.message.photo or q.message.video:
            await q.edit_message_caption(caption=text, reply_markup=kb)
        else:
            await q.edit_message_text(text=text, reply_markup=kb)
    except Exception:
        pass

async def get_inbox_rec(rec_id: int):
    async with aiosqlite.connect("bot.db") as db:
        cur = await db.execute(
            "SELECT user_id, caption, media_file_id, media_type, category,"
            " location_lat, location_lon, location_text, user_note "
            "FROM inbox WHERE id=?", (rec_id,)
        )
        return await cur.fetchone()

async def send_main_menu(chat_id, context: ContextTypes.DEFAULT_TYPE):
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üì§ –ù–æ–≤–∏–π —Ä–µ–ø–æ—Ä—Ç", callback_data="newreport")],
        [InlineKeyboardButton("üì® –ó–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="adminmsg")],
        [InlineKeyboardButton("üìú –ü—Ä–∞–≤–∏–ª–∞ / –î–∏—Å–∫–ª–µ–π–º–µ—Ä", callback_data="showrules")]
    ])
    try:
        await context.bot.send_message(
            chat_id=chat_id,
            text=("üëã –ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ.\n"
                  "‚Äî ¬´üì§ –ù–æ–≤–∏–π —Ä–µ–ø–æ—Ä—Ç¬ª ‚Üí –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ –ø–æ—Ä—É—à–µ–Ω–Ω—è.\n"
                  "‚Äî ¬´üì® –ó–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞¬ª ‚Üí —Ç–µ–∫—Å—Ç–æ–≤–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è (–Ω–µ –ø—É–±–ª—ñ–∫—É—î—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª).\n"
                  "‚Äî ¬´üìú –ü—Ä–∞–≤–∏–ª–∞ / –î–∏—Å–∫–ª–µ–π–º–µ—Ä¬ª ‚Äî –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å –∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π."),
            reply_markup=kb
        )
    except Exception:
        pass

# ========= HANDLERS =========
# /start + deep-link ?start=report
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args and len(context.args) > 0 and context.args[0].lower() == "report":
        if update.message:
            await update.message.reply_text("üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∞–±–æ –≤—ñ–¥–µ–æ –ø–æ—Ä—É—à–µ–Ω–Ω—è. –ü–æ—Ç—ñ–º –æ–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é.")
        else:
            await send_main_menu(update.effective_chat.id, context)
        return
    await send_main_menu(update.effective_chat.id, context)

# /report ‚Äî —à–≤–∏–¥–∫–∏–π —Å—Ç–∞—Ä—Ç —Ä–µ–ø–æ—Ä—Ç—É
async def report_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∞–±–æ –≤—ñ–¥–µ–æ –ø–æ—Ä—É—à–µ–Ω–Ω—è. –ü–æ—Ç—ñ–º –æ–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é.")

# /rules ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞
async def rules_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(RULES_TEXT, disable_web_page_preview=True)

# –ö–Ω–æ–ø–∫–∞ ‚Äúüìú –ü—Ä–∞–≤–∏–ª–∞ / –î–∏—Å–∫–ª–µ–π–º–µ—Ä‚Äù
async def show_rules_btn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await edit_q_message(q, RULES_TEXT)

async def start_new_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await q.edit_message_text("üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∞–±–æ –≤—ñ–¥–µ–æ –ø–æ—Ä—É—à–µ–Ω–Ω—è. –ü–æ—Ç—ñ–º –æ–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é.")

async def handle_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await ensure_user(user.id)

    async with aiosqlite.connect("bot.db") as db:
        caption = (update.message.caption or "").strip()
        if update.message.photo:
            file_id, mtype = update.message.photo[-1].file_id, "photo"
        elif update.message.video:
            file_id, mtype = update.message.video.file_id, "video"
        else:
            await update.message.reply_text("üìé –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∞–±–æ –≤—ñ–¥–µ–æ, –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç.")
            return
        await db.execute(
            "INSERT INTO inbox(user_id,caption,media_file_id,media_type,category,ts) VALUES(?,?,?,?,?,?)",
            (user.id, caption, file_id, mtype, "", int(time.time()))
        )
        await db.commit()

    await update.message.reply_text("üö¶ –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=category_keyboard())

async def handle_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    _, code = q.data.split("|", 1)
    uid = q.from_user.id

    category = CATEGORY_MAP.get(code)
    if not category:
        await edit_q_message(q, "‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è.")
        return

    async with aiosqlite.connect("bot.db") as db:
        cur = await db.execute(
            "SELECT id,caption,media_file_id,media_type,location_lat,location_lon,location_text,user_note "
            "FROM inbox WHERE user_id=? AND category='' ORDER BY id DESC LIMIT 1",
            (uid,)
        )
        row = await cur.fetchone()
        if not row:
            await edit_q_message(q, "‚ö†Ô∏è –ù–µ–º–∞—î –º–µ–¥—ñ–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return
        rec_id = row[0]
        await db.execute("UPDATE inbox SET category=? WHERE id=?", (category, rec_id))
        await db.commit()

    has_loc = bool(row[4] and row[5]) or bool(row[6])
    has_note = bool(row[7])
    await edit_q_message(
        q,
        "‚ÑπÔ∏è –ó–∞ –±–∞–∂–∞–Ω–Ω—è–º –¥–æ–¥–∞–π—Ç–µ –ª–æ–∫–∞—Ü—ñ—é —Ç–∞/–∞–±–æ –∫–æ–º–µ–Ω—Ç–∞—Ä. –ü–æ—Ç—ñ–º –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´‚û°Ô∏è –î–∞–ª—ñ¬ª.",
        kb=detail_menu_kb(has_loc, has_note, rec_id)
    )

# ===== –î–µ—Ç–∞–ª—ñ —Ä–µ–ø–æ—Ä—Ç—É (–ª–æ–∫–∞—Ü—ñ—è/–Ω–æ—Ç–∞—Ç–∫–∞/—Ñ—ñ–Ω—ñ—à) =====
async def det_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    _, action, rec_s = q.data.split("|", 2)
    rec_id = int(rec_s)

    if action == "loc":
        context.user_data["await_loc_rec"] = rec_id
        await q.message.reply_text(
            "üìç –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é (–°–∫—Ä—ñ–ø–∫–∞ ‚Üí –õ–æ–∫–∞—Ü—ñ—è) –ê–ë–û –Ω–∞–ø–∏—à—ñ—Ç—å —Ç–µ–∫—Å—Ç-–∞–¥—Ä–µ—Å—É.\n"
            "–ö–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—Ç–µ, –∑–Ω–æ–≤—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´‚û°Ô∏è –î–∞–ª—ñ¬ª."
        )
        row = await get_inbox_rec(rec_id)
        has_loc = bool(row[5] and row[6]) or bool(row[7])
        has_note = bool(row[8])
        await edit_q_message(q, "‚ÑπÔ∏è –î–æ–¥–∞–π—Ç–µ –¥–µ—Ç–∞–ª—ñ –∞–±–æ —Ç–∏—Å–Ω—ñ—Ç—å ¬´‚û°Ô∏è –î–∞–ª—ñ¬ª.",
                             kb=detail_menu_kb(has_loc, has_note, rec_id))
        return

    if action == "note":
        context.user_data["await_note_rec"] = rec_id
        await q.message.reply_text("üìù –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä (–Ω–æ–º–µ—Ä –∞–≤—Ç–æ, —á–∞—Å, —Å–º—É–≥–∏ —Ç–æ—â–æ).")
        row = await get_inbox_rec(rec_id)
        has_loc = bool(row[5] and row[6]) or bool(row[7])
        has_note = bool(row[8])
        await edit_q_message(q, "‚ÑπÔ∏è –î–æ–¥–∞–π—Ç–µ –¥–µ—Ç–∞–ª—ñ –∞–±–æ —Ç–∏—Å–Ω—ñ—Ç—å ¬´‚û°Ô∏è –î–∞–ª—ñ¬ª.",
                             kb=detail_menu_kb(has_loc, has_note, rec_id))
        return

    if action == "done":
        row = await get_inbox_rec(rec_id)
        if not row:
            await edit_q_message(q, "‚ùó –ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return
        uid, caption, file_id, mtype, category, lat, lon, loc_text, user_note = row
        uname = update.effective_user.username or "–±–µ–∑_–Ω—ñ–∫–∞"

        parts = [
            "üöó –ü–æ—Ä—É—à–µ–Ω–Ω—è –ü–î–† | –ó–∞–ø–æ—Ä—ñ–∂–∂—è",
            f"üóÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category}",
            f"üßæ {PDR_MAP.get(category,'–ü–î–†: (—É—Ç–æ—á–Ω–∏—Ç–∏)')}",
            f"üë§ –í—ñ–¥: @{uname} (id {uid})",
        ]
        if (lat is not None and lon is not None):
            parts.append(f"üìç –õ–æ–∫–∞—Ü—ñ—è: https://maps.google.com/?q={lat:.6f},{lon:.6f}")
        elif loc_text:
            parts.append(f"üìç –õ–æ–∫–∞—Ü—ñ—è: {loc_text}")
        if user_note:
            parts.append(f"üìù –ü—Ä–∏–º—ñ—Ç–∫–∞: {user_note}")
        if caption:
            parts.append("")
            parts.append(caption)
        base_text = "\n".join(parts)

        async with aiosqlite.connect("bot.db") as db:
            cur = await db.execute("SELECT trust FROM users WHERE user_id=?", (uid,))
            trust = (await cur.fetchone() or (0,))[0]

        if TRUST_QUOTA > 0 and ADMIN_CHAT_ID and trust < TRUST_QUOTA:
            kb = InlineKeyboardMarkup([[
                InlineKeyboardButton("‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data=f"mod|ok|{rec_id}"),
                InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏",   callback_data=f"mod|no|{rec_id}")
            ]])
            adm_caption = "üìù –ù–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é\n" + base_text
            if mtype == "photo":
                await tg_app.bot.send_photo(chat_id=int(ADMIN_CHAT_ID), photo=file_id, caption=adm_caption, reply_markup=kb)
            else:
                await tg_app.bot.send_video(chat_id=int(ADMIN_CHAT_ID), video=file_id, caption=adm_caption, reply_markup=kb)
            await edit_q_message(q, "üîé –†–µ–ø–æ—Ä—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é. –î—è–∫—É—î–º–æ!")
            return

        try:
            await publish_to_channel(context, mtype, file_id, base_text)
            await edit_q_message(q, "‚úÖ –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª. –î—è–∫—É—î–º–æ!")
        except Exception as e:
            await edit_q_message(q, f"‚ùó –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏: {e}")

# ===== –ü—Ä–∏–π–æ–º –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó / –∞–¥—Ä–µ—Å–∏ / –Ω–æ—Ç–∞—Ç–∫–∏ =====
async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "await_loc_rec" not in context.user_data:
        return
    rec_id = context.user_data.pop("await_loc_rec")
    loc = update.message.location
    if not loc:
        return
    async with aiosqlite.connect("bot.db") as db:
        await db.execute("UPDATE inbox SET location_lat=?, location_lon=?, location_text=NULL WHERE id=?",
                         (loc.latitude, loc.longitude, rec_id))
        await db.commit()
    await update.message.reply_text("‚úÖ –õ–æ–∫–∞—Ü—ñ—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")

async def handle_text_while_waiting(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    if not text:
        return
    if "await_loc_rec" in context.user_data:
        rec_id = context.user_data.pop("await_loc_rec")
        async with aiosqlite.connect("bot.db") as db:
            await db.execute("UPDATE inbox SET location_text=?, location_lat=NULL, location_lon=NULL WHERE id=?",
                             (text, rec_id))
            await db.commit()
        await update.message.reply_text("‚úÖ –ê–¥—Ä–µ—Å—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
        return
    if "await_note_rec" in context.user_data:
        rec_id = context.user_data.pop("await_note_rec")
        async with aiosqlite.connect("bot.db") as db:
            await db.execute("UPDATE inbox SET user_note=? WHERE id=?", (text, rec_id))
            await db.commit()
        await update.message.reply_text("‚úÖ –ö–æ–º–µ–Ω—Ç–∞—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
        return

# ===== –ê–≤—Ç–æ-–º–µ–Ω—é –¥–ª—è –Ω–æ–≤–∞—á–∫—ñ–≤ (–±–µ–∑ /start) =====
async def auto_menu_fallback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "await_loc_rec" in context.user_data or "await_note_rec" in context.user_data:
        return
    uid = update.effective_user.id
    await ensure_user(uid)
    async with aiosqlite.connect("bot.db") as db:
        cur = await db.execute("SELECT seen_menu FROM users WHERE user_id=?", (uid,))
        row = await cur.fetchone()
        seen = (row[0] if row else 0)
        if not seen:
            await db.execute("UPDATE users SET seen_menu=1 WHERE user_id=?", (uid,))
            await db.commit()
            await send_main_menu(update.effective_chat.id, context)

# ===== –ú–æ–¥–µ—Ä–∞—Ü—ñ—è =====
async def mod_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    _, decision, rec_s = q.data.split("|", 2)
    rec_id = int(rec_s)

    row = await get_inbox_rec(rec_id)
    if not row:
        await edit_q_message(q, "–ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    uid, caption, file_id, mtype, category, lat, lon, loc_text, user_note = row

    async with aiosqlite.connect("bot.db") as db:
        cur = await db.execute("SELECT trust FROM users WHERE user_id=?", (uid,))
        trust = (await cur.fetchone() or (0,))[0]

    if decision == "ok":
        parts = [
            "üöó –ü–æ—Ä—É—à–µ–Ω–Ω—è –ü–î–† | –ó–∞–ø–æ—Ä—ñ–∂–∂—è",
            f"üóÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category}",
            f"üßæ {PDR_MAP.get(category,'–ü–î–†: (—É—Ç–æ—á–Ω–∏—Ç–∏)')}",
        ]
        if (lat is not None and lon is not None):
            parts.append(f"üìç –õ–æ–∫–∞—Ü—ñ—è: https://maps.google.com/?q={lat:.6f},{lon:.6f}")
        elif loc_text:
            parts.append(f"üìç –õ–æ–∫–∞—Ü—ñ—è: {loc_text}")
        if user_note:
            parts.append(f"üìù –ü—Ä–∏–º—ñ—Ç–∫–∞: {user_note}")
        if caption:
            parts.append("")
            parts.append(caption)
        text = "\n".join(parts)

        try:
            await publish_to_channel(context, mtype, file_id, text)
            new_trust = min(trust + 1, TRUST_QUOTA)
            async with aiosqlite.connect("bot.db") as db:
                await db.execute("UPDATE users SET trust=? WHERE user_id=?", (new_trust, uid))
                await db.commit()
            await edit_q_message(q, f"‚úÖ –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ. –î–æ–≤—ñ—Ä–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {new_trust}/{TRUST_QUOTA}")
        except Exception as e:
            await edit_q_message(q, f"‚ùó –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏: {e}\n–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ CHANNEL_ID —Ç–∞ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞.")
    else:
        await edit_q_message(q, "‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω–æ.")

# ===== –ó–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ =====
ADMIN_MSG = 1001

async def ask_admin_msg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await q.edit_message_text("‚úçÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É. –í–æ–Ω–æ **–Ω–µ –ø—É–±–ª—ñ–∫—É—î—Ç—å—Å—è** –≤ –∫–∞–Ω–∞–ª—ñ.")
    return ADMIN_MSG

async def handle_admin_msg_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    if ADMIN_CHAT_ID:
        try:
            uname = update.effective_user.username or '–±–µ–∑_–Ω—ñ–∫–∞'
            msg = (
                "üì® –ù–æ–≤–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                f"–í—ñ–¥: @{uname} (id {update.effective_user.id})\n\n"
                f"{text}"
            )
            await context.bot.send_message(chat_id=int(ADMIN_CHAT_ID), text=msg)
        except Exception as e:
            print("ADMIN DM ERROR:", e)

    await update.message.reply_text("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É. –î—è–∫—É—î–º–æ!")
    return ConversationHandler.END

# ===== –î–æ–ø–æ–º—ñ–∂–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ =====
async def chatid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"chat_id: {update.effective_chat.id}")

# ========= ROUTING =========
tg_app.add_handler(CommandHandler("start", start))
tg_app.add_handler(CommandHandler("report", report_cmd))
tg_app.add_handler(CommandHandler("rules", rules_cmd))        # ‚Üê –¥–æ–¥–∞–Ω–æ
tg_app.add_handler(CommandHandler("chatid", chatid))

tg_app.add_handler(CallbackQueryHandler(start_new_report, pattern=r"^newreport$"))
tg_app.add_handler(CallbackQueryHandler(handle_category,   pattern=r"^cat\|"))
tg_app.add_handler(CallbackQueryHandler(det_action,        pattern=r"^det\|"))
tg_app.add_handler(CallbackQueryHandler(mod_action,        pattern=r"^mod\|"))
tg_app.add_handler(CallbackQueryHandler(show_rules_btn,    pattern=r"^showrules$"))  # ‚Üê –¥–æ–¥–∞–Ω–æ

tg_app.add_handler(ConversationHandler(
    entry_points=[CallbackQueryHandler(ask_admin_msg, pattern=r"^adminmsg$")],
    states={ADMIN_MSG: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_admin_msg_text)]},
    fallbacks=[]
))

# –ø—Ä–∏–π–æ–º –º–µ–¥—ñ–∞
tg_app.add_handler(MessageHandler(filters.PHOTO | filters.VIDEO, handle_media))
# –ø—Ä–∏–π–æ–º –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó/—Ç–µ–∫—Å—Ç—É –ø—ñ–¥ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
tg_app.add_handler(MessageHandler(filters.LOCATION, handle_location))
tg_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_while_waiting))
# –∞–≤—Ç–æ-–º–µ–Ω—é —è–∫ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–µ–∫—Å—Ç–æ–≤–∏–π —Ö–µ–Ω–¥–ª–µ—Ä
tg_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, auto_menu_fallback))

# ========= FASTAPI LIFECYCLE =========
@app.on_event("startup")
async def on_startup():
    await init_db()
    await tg_app.initialize()
    await tg_app.start()

@app.on_event("shutdown")
async def on_shutdown():
    await tg_app.stop()
    await tg_app.shutdown()

@app.get("/")
async def root():
    return {"ok": True}

@app.post(f"/webhook/{secret}")
async def telegram_webhook(secret: str, request: Request):
    if secret != WEBHOOK_SECRET:
        raise HTTPException(status_code=403)
    data = await request.json()
    update = Update.de_json(data, tg_app.bot)
    await tg_app.process_update(update)
    return {"ok": True}
